// Mock implementation for react-query
const queryClient = {
  fetchQuery: jest.fn(),
  prefetchQuery: jest.fn(),
  getQueryData: jest.fn(),
  setQueryData: jest.fn(),
  getQueryState: jest.fn(),
  invalidateQueries: jest.fn(),
  refetchQueries: jest.fn(),
  cancelQueries: jest.fn(),
  removeQueries: jest.fn(),
  resetQueries: jest.fn(),
  isFetching: jest.fn(() => false),
  isMutating: jest.fn(() => false),
  getMutationDefaults: jest.fn(),
  getDefaultOptions: jest.fn(() => ({})),
  setDefaultOptions: jest.fn(),
  getQueryCache: jest.fn(),
  getMutationCache: jest.fn(),
  clear: jest.fn(),
};

const defaultQueryResult = {
  data: null,
  error: null,
  isError: false,
  isFetched: false,
  isFetchedAfterMount: false,
  isFetching: false,
  isIdle: false,
  isLoading: false,
  isLoadingError: false,
  isRefetchError: false,
  isSuccess: true,
  refetch: jest.fn(),
  remove: jest.fn(),
  status: 'success',
};

const defaultMutationResult = {
  data: null,
  error: null,
  isError: false,
  isIdle: true,
  isLoading: false,
  isPaused: false,
  isPending: false,
  isSuccess: false,
  reset: jest.fn(),
  context: undefined,
  failureCount: 0,
  failureReason: null,
  mutate: jest.fn(),
  mutateAsync: jest.fn(),
  status: 'idle',
  variables: undefined,
};

module.exports = {
  QueryClient: jest.fn(() => queryClient),
  QueryClientProvider: ({ children }) => children,
  useQuery: jest.fn(() => defaultQueryResult),
  useMutation: jest.fn(() => defaultMutationResult),
  useQueries: jest.fn(() => []),
  useInfiniteQuery: jest.fn(() => ({
    ...defaultQueryResult,
    fetchNextPage: jest.fn(),
    fetchPreviousPage: jest.fn(),
    hasNextPage: false,
    hasPreviousPage: false,
    isFetchingNextPage: false,
    isFetchingPreviousPage: false,
  })),
  useIsFetching: jest.fn(() => 0),
  useIsMutating: jest.fn(() => 0),
  useMutationState: jest.fn(() => []),
  useQueryClient: jest.fn(() => queryClient),
};
import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import DashboardLayout from "@/components/layout/dashboard-layout";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Input } from "@/components/ui/input";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { format } from "date-fns";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Report, Owner } from "@shared/schema";
import { Loader2, FileText, CheckCircle, Download, Send, CalendarIcon, FilterIcon, Eye } from "lucide-react";

// Define the date range types
const dateRangeTypes = ["byMonth", "byDateRange", "allTime"] as const;

// Form schema with conditional validation based on range type
const formSchema = z.object({
  ownerIds: z.array(z.string()).min(1, "At least one owner must be selected"),
  rangeType: z.enum(dateRangeTypes),
  // Month and year for monthly selection
  month: z.string().optional(),
  year: z.string().optional(),
  // Date range fields
  startDate: z.date().optional(),
  endDate: z.date().optional(),
  sendEmail: z.boolean().default(false),
}).refine((data) => {
  if (data.rangeType === "byMonth") {
    return data.month && data.year;
  }
  if (data.rangeType === "byDateRange") {
    return data.startDate && data.endDate;
  }
  return true;
}, {
  message: "Required date fields are missing",
  path: ["rangeType"],
});

type FormValues = z.infer<typeof formSchema>;

export default function ReportsPage() {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const { toast } = useToast();

  const currentYear = new Date().getFullYear();
  const years = Array.from({ length: 3 }, (_, i) => (currentYear - i).toString());
  
  const months = [
    { value: "1", label: "January" },
    { value: "2", label: "February" },
    { value: "3", label: "March" },
    { value: "4", label: "April" },
    { value: "5", label: "May" },
    { value: "6", label: "June" },
    { value: "7", label: "July" },
    { value: "8", label: "August" },
    { value: "9", label: "September" },
    { value: "10", label: "October" },
    { value: "11", label: "November" },
    { value: "12", label: "December" },
  ];

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      ownerIds: [],
      rangeType: "byMonth",
      month: new Date().getMonth().toString(),
      year: currentYear.toString(),
      startDate: undefined,
      endDate: undefined,
      sendEmail: false,
    },
  });

  const { data: reports = [], isLoading: isLoadingReports } = useQuery<Report[]>({
    queryKey: ["/api/reports"],
  });

  const { data: owners = [] } = useQuery<Owner[]>({
    queryKey: ["/api/owners"],
  });

  const generateMutation = useMutation({
    mutationFn: async (values: FormValues) => {
      if (values.ownerIds.length === 0) {
        throw new Error("At least one owner must be selected");
      }
      
      // Currently the server only supports processing one owner at a time
      // We'll generate a report for the first selected owner
      const ownerId = parseInt(values.ownerIds[0]);
      
      // Prepare the appropriate payload based on the range type
      let payload: any = {
        ownerId: ownerId,
        sendEmail: values.sendEmail,
      };
      
      // Add date range parameters based on the selected range type
      if (values.rangeType === "byMonth" && values.month && values.year) {
        payload = {
          ...payload,
          month: parseInt(values.month) + 1, // Adjust for 1-based months in the API
          year: parseInt(values.year),
        };
      } else {
        // For now, we'll use the current month/year if other range types are selected
        // since the server endpoint currently only supports monthly reports
        const now = new Date();
        payload = {
          ...payload,
          month: now.getMonth() + 1,
          year: now.getFullYear(),
        };
      }
      
      const response = await apiRequest("POST", "/api/reports/generate/monthly", payload);
      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Success",
        description: `Report generated successfully${data.report.sent ? ' and sent to owner' : ''}`,
      });
      queryClient.invalidateQueries({ queryKey: ["/api/reports"] });
      setIsDialogOpen(false);
      form.reset({
        ownerIds: [],
        rangeType: "byMonth",
        month: new Date().getMonth().toString(),
        year: currentYear.toString(),
        startDate: undefined,
        endDate: undefined,
        sendEmail: false,
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: `Failed to generate report: ${(error as Error).message}`,
        variant: "destructive",
      });
    },
  });

  const onSubmit = (values: FormValues) => {
    generateMutation.mutate(values);
  };

  const getMonthName = (month: number | null) => {
    if (month === null) return 'Unknown';
    return new Date(0, month - 1).toLocaleString('default', { month: 'long' });
  };

  const recentReports = reports
    .sort((a, b) => {
      const dateA = a.generatedAt ? new Date(a.generatedAt).getTime() : 0;
      const dateB = b.generatedAt ? new Date(b.generatedAt).getTime() : 0;
      return dateB - dateA;
    })
    .slice(0, 5);

  const groupedReports = reports.reduce<{ [key: string]: Report[] }>((acc, report) => {
    const year = report.year;
    const month = report.month;
    const key = `${year}-${month}`;
    
    if (!acc[key]) {
      acc[key] = [];
    }
    
    acc[key].push(report);
    return acc;
  }, {});

  const sortedMonths = Object.entries(groupedReports)
    .map(([key, reports]) => ({
      key,
      month: reports[0].month ?? 1,
      year: reports[0].year ?? new Date().getFullYear(),
      reports,
    }))
    .sort((a, b) => {
      const yearA = a.year ?? 0;
      const yearB = b.year ?? 0;
      if (yearA !== yearB) return yearB - yearA;
      
      const monthA = a.month ?? 0;
      const monthB = b.month ?? 0;
      return monthB - monthA;
    });

  return (
    <DashboardLayout
      title="Reports"
      actions={
        <>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <FileText className="mr-2 h-4 w-4" />
                Generate Report
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Generate Expense Reports</DialogTitle>
                <DialogDescription>
                  Create detailed expense reports for property owners.
                </DialogDescription>
              </DialogHeader>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                  {/* Owner Selection */}
                  <FormField
                    control={form.control}
                    name="ownerIds"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Select Owners</FormLabel>
                        <FormDescription>
                          Choose one or more property owners to generate reports for.
                        </FormDescription>
                        <div className="grid grid-cols-2 gap-2 mt-2">
                          {owners.map((owner) => (
                            <FormItem key={owner.id} className="flex items-center space-x-2 rounded-md border p-2">
                              <FormControl>
                                <Checkbox 
                                  checked={field.value.includes(owner.id.toString())}
                                  onCheckedChange={(checked) => {
                                    const ownerIdStr = owner.id.toString();
                                    if (checked) {
                                      field.onChange([...field.value, ownerIdStr]);
                                    } else {
                                      field.onChange(field.value.filter(val => val !== ownerIdStr));
                                    }
                                  }}
                                />
                              </FormControl>
                              <FormLabel className="font-normal cursor-pointer">
                                {owner.name}
                              </FormLabel>
                            </FormItem>
                          ))}
                        </div>
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          className="mt-2"
                          onClick={() => {
                            const allOwnerIds = owners.map(owner => owner.id.toString());
                            if (field.value.length === allOwnerIds.length) {
                              field.onChange([]);
                            } else {
                              field.onChange(allOwnerIds);
                            }
                          }}
                        >
                          {field.value.length === owners.length ? 'Deselect All' : 'Select All'}
                        </Button>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  {/* Date Range Selection */}
                  <FormField
                    control={form.control}
                    name="rangeType"
                    render={({ field }) => (
                      <FormItem className="space-y-2">
                        <FormLabel>Time Range</FormLabel>
                        <FormDescription>
                          Select the time period for the expense reports.
                        </FormDescription>
                        <FormControl>
                          <RadioGroup
                            onValueChange={field.onChange}
                            value={field.value}
                            className="flex flex-col space-y-1"
                          >
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="byMonth" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                By Month and Year
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="byDateRange" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                By Date Range
                              </FormLabel>
                            </FormItem>
                            <FormItem className="flex items-center space-x-3 space-y-0">
                              <FormControl>
                                <RadioGroupItem value="allTime" />
                              </FormControl>
                              <FormLabel className="font-normal">
                                All Time
                              </FormLabel>
                            </FormItem>
                          </RadioGroup>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  {/* Conditional Fields Based on Range Type */}
                  {form.watch('rangeType') === 'byMonth' && (
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="month"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Month</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select month" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {months.map((month) => (
                                  <SelectItem key={month.value} value={(parseInt(month.value) - 1).toString()}>
                                    {month.label}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="year"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Year</FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select year" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {years.map((year) => (
                                  <SelectItem key={year} value={year}>
                                    {year}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  )}
                  
                  {form.watch('rangeType') === 'byDateRange' && (
                    <div className="grid grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="startDate"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel>Start Date</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={"outline"}
                                    className={`w-full pl-3 text-left font-normal ${!field.value && "text-muted-foreground"}`}
                                  >
                                    {field.value ? (
                                      format(field.value, "PPP")
                                    ) : (
                                      <span>Pick a date</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                  mode="single"
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  initialFocus
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="endDate"
                        render={({ field }) => (
                          <FormItem className="flex flex-col">
                            <FormLabel>End Date</FormLabel>
                            <Popover>
                              <PopoverTrigger asChild>
                                <FormControl>
                                  <Button
                                    variant={"outline"}
                                    className={`w-full pl-3 text-left font-normal ${!field.value && "text-muted-foreground"}`}
                                  >
                                    {field.value ? (
                                      format(field.value, "PPP")
                                    ) : (
                                      <span>Pick a date</span>
                                    )}
                                    <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                  </Button>
                                </FormControl>
                              </PopoverTrigger>
                              <PopoverContent className="w-auto p-0" align="start">
                                <Calendar
                                  mode="single"
                                  selected={field.value}
                                  onSelect={field.onChange}
                                  initialFocus
                                />
                              </PopoverContent>
                            </Popover>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  )}
                  
                  <FormField
                    control={form.control}
                    name="sendEmail"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                        <FormControl>
                          <Checkbox
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                        <div className="space-y-1 leading-none">
                          <FormLabel>Send Email to Owners</FormLabel>
                          <FormDescription>
                            The reports will be automatically emailed to each property owner.
                          </FormDescription>
                        </div>
                      </FormItem>
                    )}
                  />
                  
                  <DialogFooter>
                    <Button 
                      type="button" 
                      variant="outline" 
                      onClick={() => setIsDialogOpen(false)}
                    >
                      Cancel
                    </Button>
                    <Button type="submit" disabled={generateMutation.isPending}>
                      {generateMutation.isPending ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        "Generate Report"
                      )}
                    </Button>
                  </DialogFooter>
                </form>
              </Form>
            </DialogContent>
          </Dialog>
        </>
      }
    >
      <Tabs defaultValue="recent">
        <TabsList className="mb-6">
          <TabsTrigger value="recent">Recent Reports</TabsTrigger>
          <TabsTrigger value="monthly">Monthly Archive</TabsTrigger>
        </TabsList>
        
        <TabsContent value="recent">
          {isLoadingReports ? (
            <div className="grid gap-4">
              {[1, 2, 3].map((i) => (
                <div key={i} className="animate-pulse">
                  <Card>
                    <CardHeader className="pb-2">
                      <div className="h-6 bg-gray-200 rounded w-2/3 mb-2"></div>
                      <div className="h-4 bg-gray-200 rounded w-1/3"></div>
                    </CardHeader>
                    <CardContent>
                      <div className="h-4 bg-gray-200 rounded w-full mb-2"></div>
                      <div className="h-10 bg-gray-200 rounded w-1/4 mt-4"></div>
                    </CardContent>
                  </Card>
                </div>
              ))}
            </div>
          ) : recentReports.length === 0 ? (
            <div className="text-center py-10">
              <div className="text-gray-500 mb-4">No reports generated yet</div>
              <Button onClick={() => setIsDialogOpen(true)}>
                <FileText className="mr-2 h-4 w-4" />
                Generate Your First Report
              </Button>
            </div>
          ) : (
            <div className="grid gap-4">
              {recentReports.map((report) => {
                const owner = owners.find(o => o.id === report.ownerId);
                
                return (
                  <Card key={report.id} className="shadow-sm hover:shadow-md transition-shadow">
                    <CardHeader className="pb-2">
                      <CardTitle className="text-lg flex justify-between">
                        <span>{report.name}</span>
                        <span className="text-sm font-normal text-gray-500">
                          {report.generatedAt ? new Date(report.generatedAt).toLocaleDateString() : 'N/A'}
                        </span>
                      </CardTitle>
                      <CardDescription>
                        Owner: {owner?.name || "Unknown"}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="text-sm text-gray-600 mb-4">
                        Monthly expense report for {getMonthName(report.month)} {report.year ?? 'N/A'}
                      </div>
                      <div className="flex space-x-2">
                        <Button variant="outline" size="sm" className="h-8">
                          <Download className="h-4 w-4 mr-1" />
                          Download
                        </Button>
                        {!report.sent ? (
                          <Button variant="outline" size="sm" className="h-8">
                            <Send className="h-4 w-4 mr-1" />
                            Email to Owner
                          </Button>
                        ) : (
                          <div className="flex items-center text-green-600 text-sm">
                            <CheckCircle className="h-4 w-4 mr-1" />
                            Sent to Owner
                          </div>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="monthly">
          {isLoadingReports ? (
            <div className="animate-pulse space-y-6">
              {[1, 2, 3].map((i) => (
                <div key={i}>
                  <div className="h-6 bg-gray-200 rounded w-1/4 mb-4"></div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {[1, 2].map((j) => (
                      <div key={j} className="h-24 bg-gray-100 rounded"></div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          ) : sortedMonths.length === 0 ? (
            <div className="text-center py-10">
              <div className="text-gray-500 mb-4">No reports generated yet</div>
              <Button onClick={() => setIsDialogOpen(true)}>
                <FileText className="mr-2 h-4 w-4" />
                Generate Your First Report
              </Button>
            </div>
          ) : (
            <div className="space-y-8">
              {sortedMonths.map(({ key, month, year, reports }) => (
                <div key={key}>
                  <h3 className="text-lg font-medium mb-4">{getMonthName(month)} {year}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {reports.map((report) => {
                      const owner = owners.find(o => o.id === report.ownerId);
                      
                      return (
                        <Card key={report.id} className="shadow-sm hover:shadow-md transition-shadow">
                          <CardHeader className="pb-2">
                            <CardTitle className="text-base">{owner?.name || "Unknown Owner"}</CardTitle>
                            <CardDescription>
                              Generated: {report.generatedAt ? new Date(report.generatedAt).toLocaleDateString() : 'N/A'}
                            </CardDescription>
                          </CardHeader>
                          <CardContent>
                            <div className="flex space-x-2 mt-2">
                              <Button variant="outline" size="sm" className="h-8">
                                <Download className="h-4 w-4 mr-1" />
                                Download
                              </Button>
                              {!report.sent ? (
                                <Button variant="outline" size="sm" className="h-8">
                                  <Send className="h-4 w-4 mr-1" />
                                  Email
                                </Button>
                              ) : (
                                <div className="flex items-center text-green-600 text-sm">
                                  <CheckCircle className="h-4 w-4 mr-1" />
                                  Sent
                                </div>
                              )}
                            </div>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </DashboardLayout>
  );
}
